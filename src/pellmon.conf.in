############################################################################################
# Enable plugins
############################################################################################

[enabled_plugins]
# List all plugins to enable pxx = PluginName
# Enable the ScotteCom plugin to communicate with a NBE scotty/woody/biocomfort pellet burner
p01 = ScotteCom

# CustomAlarms lets you define limits and actions for data items
#p02 = CustomAlarms

# RaspberryGPIO provides IO, counters and a tachometer. Works only on a raspberry pi
#p03 = RaspberryGPIO

# The calculate plugin lets you calculate your own data from existing data items
#p04 = Calculate

# The OWFS plugin connects to a running owfs server on localhost:4304 to read onewire devices
#p05 = OWFS

# The SiloLevel plugin adds parameters for silo fill up level and silo fill up date.
# When present PellmonWeb displays a graph with calculated silo level from fill up time to present time
p06 = SiloLevel

# PelletCalc calculates feeder_time and power from feeder auger revolution count  
#p07 = PelletCalc

# Testplugin is a plugin template that does nothing useful
#p99 = TestPlugin

############################################################################################
# Plugin configuration 
############################################################################################

[plugin_ScotteCom]
# The settings in this section are passed to the ScotteCom plugin

# Serial port device name, eg. /dev/ttyUSB0
# Remove to run with dummy data for testing
serialport = /dev/ttyUSB0

# Chip version string or 'auto'
chipversion = auto

[plugin_TestPlugin]
# Items in sections named as "plugin_xxx" are passed to a plugin named "xxx"
# This plugin adds the items listed as dummy parameters
plugindata1 = 123

[plugin_CustomAlarms]
# Define an alarm by creating four parameters:
# xxx_item = item to read
# xxx_comparator = >|>=|<|<=|==|!=
# xxx_level = level to compare against
# xxx_status = item to hold the result of the comparision, 1=True, 0=False
# optional:
# xxx_enum = FalseText|TrueText

# example: 
#alarm1_item = boiler_temp
#alarm1_comparator = >
#alarm1_level = 90
#alarm1_status = boiler_temp_supervision
#alarm1_enum = OK|Boiler temperature too high

[plugin_RaspberryGPIO]
# xxx_function = input|latched_input|output|counter|tachometer, all inputs have the internal pullup activated
# xxx_item = item name for pin
# xxx_pin = board pin number
#example:
#gpio22_function = counter
#gpio22_item = counter1
#gpio22_pin = 15

[plugin_Calculate]
# This plugin implements a simple stack engine. 
# xxx_prog = instruction|value instruction|value... A 'value' pushes the value to the stack, an 'instrucation' pops one or several values and pushes the result back to the stack.
# xxx_readitem = Name of readonly item that executes the calculation and return the top value of the stack when read
# xxx_writeitem = Name of writeonly item that executes the calculation when written. The written value is pushed to the stack so the program can make use of it.
# xxx_readwriteitem = Name of read/write item that executes the calculation when read or written. The written value is pushed to the stack so the program can make use of it, and the top value of the stack is returned when read.
# xxx_taskcycle = execute the calculation periodically with this cycle time in seconds
# xxx_progtype = R|R/W, default is R (read only). An R/W program item can be edited in the web frontend and can be used by other programs as a variable by using get/set

# Available instructions:
# +, -, *, /, get, set, exec, >, <, ==, !=, ?, min, max, pop, dup, swap, sp, def, sto, rcl, del, gdef, gsto, grcl, gdel, if..then..[else]..end
# 'get' pops an item name, reads the value and pushes the value or 'error'
# 'set' pops an item name and a value, then writes the value to the item name and pushes the result 'OK' or 'error'. ex: "1250 feeder_capacity set"
# ? pops three values, first the value to push back when False, then the value to push back when True, and then the value to evaluate. Ex: "0 123 456 ?" will leave "456" on the stack, while "1 123 456 ?" will leave "123" on the stack
# 'min' pops two values and pushes back the smallest
# 'max' pops two values and pushes back the laragest
# 'exec' pops a calculate item name, gets its value, executes it and pushes the result
# 'pop' discards one value from the stack
# 'dup' duplicates the top value on the stack
# 'swap' swaps the order of the two top values on the stack
# 'sp' pushes the current stack depth, eg zero when the stack is empty
# 'def' pops two values, the first becames the name of a new local variable and the second it's value. If the variable already exists it's value is not changed. 
# 'sto' pops two values, the first is the name of a local variable and the second a value to write to it
# 'rcl' pops one value which identifies a local variable to read and pushes it's value back to the stack
# 'del' pops one value which identifies a local variable to delete
# gdef, gsto, grcl, gdel works exactly as def, sto, rcl, del, except that they handle global variables that persist between program executions and are available to all programs.
# 'if' marks the start of an if..then..[else]..end clause. 'then' pops a value, if it is non-zero, execution is continued until 'else|end'. If 'else' is found execution skips forward until 'end' is found. If 'then' pops a zero from the stack, execution skips forward until 'else|end' is found and then resumes

# example: get boiler temperature divided by two from an item named 'half_boiler_temp'
#calc1_prog = boiler_temp get 2 /
#calc1_readitem = half_boiler_temp


[plugin_OWFS]
# xxx_item = item name for the owfs sensor value
# xxx_path = [server::]path[:port], default server:port is localhost:4304
# optional:
# when the type is set to COUNTER the owfs path is polled cyclically and the item incremented on every 0->1 transition
# xxx_type = R|R/W|COUNTER, default is R
# xxx_latch = path, make use of the latch when using a ds2406 as input/counter

# examples:
# read the temperature value from the fake sensor available in the default owfs configuration 
#owfs1_item = faketemp
#owfs1_path = 10.67C6697351FF/temperature

# use a ds2460 as counter with support for the input latch
# owfs2_item = ds2460count
# owfs2_path = uncached/12.8D3E7D000000/sensed.A
# owfs2_type = COUNTER
# owfs2_latch = uncached/12.8D3E7D000000/latch.A


[plugin_PelletCalc]
# counter = item name to read feeder auger rev count from

############################################################################################
# Pellmonsrv configuration 
############################################################################################

[conf]
# Full path to the rrd database, if it does not exist it is created
# Remove if you don't want data polling
database = /home/motoz/rrd.db

# Full path to the optional persistent rrd database. It is copied
# over the database file at startup, and on shutdown the database
# is copied to the persistent_db file. Useful if the database
# is in a ramdisk
#persistent_db = @localstatedir@/lib/pellmon/nvrrd.db

# If persistent_db is in use the database is copied to
# persistent_db every db_store_interval seconds
db_store_interval = 7200
# Full path to the logfile
logfile = /home/motoz/PellMon/pellmon.log

# logging level = info/debug
loglevel = info

# Port number for the webserver
port = 8081

# rrd database update interval in seconds
pollinterval = 30

[authentication]
# username = password, for webinterface
testuser = 12345

[rrd_ds_names]
# These are the datasource names used when creating the rrd database,
# "dxx = datasource name". The left value (dxx) is used to match the
# datasource names to the actual data to write to it, in the 
# pollvalues section. The datasource names can be anything, but 
# the defaults are the same as the data item names in the pollvalues section 
# The rrd database is created with the datasources in the order they appear here.
# Delete or rename the rrd database file after adding/removing ds-names
# or use some other method to add the new ds-name to the existing rrd database
d01 = power_kW
d02 = boiler_temp
d03 = chute_temp
d04 = light
d05 = oxygen_desired
d06 = oxygen
d07 = power
d08 = smoke_temp
d09 = feeder_time
d10 = feeder_capacity
d11 = _logtick

[rrd_ds_types]
# Optional rrd data source type definitions for the datasource names in the 
# rrd_ds-names section. If no type is defined for a datasource name the 
# default type is used, "DS:%s:GAUGE:%u:U:U", where %s is replaced with the 
# datasource name and %u is replaced with 4*pollinterval
d09 = DS:%s:COUNTER:%u:U:U
d11 = DS:%s:COUNTER:%u:U:U

[pollvalues]
# Data values to write to the rrd database.
# "dxx = parameter/data name"
# The data names are read from the protocol plugins with the getItem method
# and written to the rrd database ds-name that has a matching "dxx".
# Data names starting with an underscore are handled by special cases in the code,
# eg. _logtick is updated whenever a protocol reports that an "event" has occured.
# In general underscored names are written as undefined, so they can be used to 
# write "spare" ds-names in an rrd database, to avoid having to recreate the rrd
# when more sensors are added. 
d01 = power_kW
d02 = boiler_temp
d03 = chute_temp
d04 = light
d05 = oxygen_desired
d06 = oxygen
d07 = power
d08 = smoke_temp
d09 = feeder_time
d10 = feeder_capacity
# Whenever something is written to the log, _logtick is also increased.
# It is used to draw a tickmark in the graph
d11 = _logtick

[email]
# Uncomment and set these for email on mode/alarm status changes
# Uses TLS, this works for gmail:
#server=smtp.gmail.com:587
#username=user
#password=12345
#from=user@mail.com
#to=user@mail.com
#subject=PellMon status
# Send email when any of these change
#conditions=alarm,mode,parameter


############################################################################################
# Pellmonweb configuration
############################################################################################

[graphcolors]
# To add a ds-name from the rrd-database to the graph, set
# dxx = #hexcolorvalue, 
# where dxx matches the [pollvalues] and [rrd_ds_names] sections
d01 = #FF0000
d02 = #00FF00
d03 = #0000FF
d04 = #FFFF00
d05 = #FF05FF
d06 = #0101FF
d07 = #207F20
d08 = #2F2FFF

[scaling]
# add optional scaling to the plotlines before drawing the graph
# The right axis will scale to match the scaled data, when there are
# several different scales in use it will match the first selected
# line in the order they appear here 
# the offset is first subracted and the result is divided by the divisor
# dxx = offset:divisor

[weblog]
# optional pellmonweb logging
#accesslog = @localstatedir@/log/pellmonweb/access.log
#errorlog = @localstatedir@/log/pellmonweb/error.log

